[{"/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/containers/Activate.js":"1","/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/actions/auth.js":"2","/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/containers/Google.js":"3","/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/App.js":"4","/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/components/UploadFile.js":"5","/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/store.js":"6","/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/containers/ResetPasswordConfirm.js":"7","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/actions/auth.js":"8","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/store.js":"9","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/reducers/auth.js":"10","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Google.js":"11","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/ResetPasswordConfirm.js":"12","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Signup.js":"13","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/index.js":"14","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Login.js":"15","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/actions/types.js":"16","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/hocs/Layout.js":"17","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Home.js":"18","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/components/Student.js":"19","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/reducers/index.js":"20","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/components/Secretary.js":"21","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/components/Navbar.js":"22","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/components/Administrator.js":"23","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/hooks/useApiUploadService.js":"24","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/App.js":"25","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/ResetPassword.js":"26","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Activate.js":"27"},{"size":1136,"mtime":1699128617958,"results":"28","hashOfConfig":"29"},{"size":7262,"mtime":1709298504987,"results":"30","hashOfConfig":"29"},{"size":1304,"mtime":1709299574881,"results":"31","hashOfConfig":"29"},{"size":1559,"mtime":1699497489442,"results":"32","hashOfConfig":"29"},{"size":3163,"mtime":1699497386220,"results":"33","hashOfConfig":"29"},{"size":398,"mtime":1699128617808,"results":"34","hashOfConfig":"29"},{"size":2153,"mtime":1699128618256,"results":"35","hashOfConfig":"29"},{"size":6690,"mtime":1709312664554,"results":"36","hashOfConfig":"37"},{"size":398,"mtime":1699128617808,"results":"38","hashOfConfig":"37"},{"size":2702,"mtime":1709314007985,"results":"39","hashOfConfig":"37"},{"size":925,"mtime":1709314351328,"results":"40","hashOfConfig":"37"},{"size":2153,"mtime":1699128618256,"results":"41","hashOfConfig":"37"},{"size":3761,"mtime":1700269904354,"results":"42","hashOfConfig":"37"},{"size":197,"mtime":1699128617770,"results":"43","hashOfConfig":"37"},{"size":3094,"mtime":1709313872329,"results":"44","hashOfConfig":"37"},{"size":928,"mtime":1709311129888,"results":"45","hashOfConfig":"37"},{"size":514,"mtime":1699128618325,"results":"46","hashOfConfig":"37"},{"size":513,"mtime":1709311432212,"results":"47","hashOfConfig":"37"},{"size":7100,"mtime":1709310971080,"results":"48","hashOfConfig":"37"},{"size":115,"mtime":1699128618391,"results":"49","hashOfConfig":"37"},{"size":7107,"mtime":1709310931488,"results":"50","hashOfConfig":"37"},{"size":2212,"mtime":1709315528339,"results":"51","hashOfConfig":"37"},{"size":7119,"mtime":1709310944234,"results":"52","hashOfConfig":"37"},{"size":2723,"mtime":1706288671940,"results":"53","hashOfConfig":"37"},{"size":1695,"mtime":1709311098813,"results":"54","hashOfConfig":"37"},{"size":1426,"mtime":1699128618220,"results":"55","hashOfConfig":"37"},{"size":1136,"mtime":1699128617958,"results":"56","hashOfConfig":"37"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"qj25fh",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e2i35m",{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"93"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/containers/Activate.js",[],["127","128"],"/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/actions/auth.js",[],"/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/containers/Google.js",["129","130"],"import React, { useEffect } from 'react';\nimport { Link, useLocation, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { googleAuthenticate } from '../actions/auth';\nimport queryString from 'query-string';\n\nconst Google = ({ googleAuthenticate }) => {\n    let location = useLocation();\n\n    useEffect(() => {\n        const values = queryString.parse(location.search);\n        const state = values.state ? values.state : null;\n        const code = values.code ? values.code : null;\n\n        console.log('State: ' + state);\n        console.log('Code: ' + code);\n\n        if (state && code) {\n            googleAuthenticate(state, code);\n        }\n    }, [location]);\n\n    return (\n        <Redirect to='/upload' />\n    );\n};\n\nexport default connect(null, { googleAuthenticate })(Google);\n\n// <div className='container'>\n//             <div class='jumbotron mt-5'>\n//                 <h1 class='display-4'>Welcome to Auth System!</h1>\n//                 <p class='lead'>This is an incredible authentication system with production level features!</p>\n//                 <hr class='my-4' />\n//                 <p>Click the Log In button</p>\n//                 <Link class='btn btn-primary btn-lg' to='/login' role='button'>Login</Link>\n//             </div>\n//         </div>\n","/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/App.js",[],"/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/components/UploadFile.js",["131","132","133"],"import React, {useState,useEffect} from 'react'\nimport axios from 'axios'\n\n\nfunction UploadFile() {\n    const [filename, setFilename] = useState('')\n    const [files, setFiles] = useState([{}])\n    const [status, setstatus] = useState('')\n\n\n    let api = 'http://127.0.0.1:8000/test/api'\n\n\n    const saveFile = () =>{\n        console.log('Button clicked')\n\n        let formData = new FormData();\n        formData.append(\"pdf\", filename)\n\n        let axiosConfig = {\n            headers: {\n                'Content-Type': 'multpart/form-data'\n            }\n        }\n\n        console.log(formData)\n        axios.post(api + '/files/', formData, axiosConfig).then(\n            response =>{\n                console.log(response)\n                setstatus('File Uploaded Successfully')\n            }\n        ).catch(error =>{\n            console.log(error)\n        })\n    }\n\n\n    const getFiles = () =>{\n\n        axios.get(api + '/files/').then(\n            response =>{\n                //console.log(response.data)\n                setFiles(response.data)\n            }\n        ).catch(error =>{\n            console.log(error)\n        })\n\n    }\n\n    const forceDownload = (response, title) =>{\n        console.log(response)\n        const url = window.URL.createObjectURL(new Blob([response.data]))\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', title+'.pdf')\n        document.body.appendChild(link)\n        link.click()\n\n\n    }\n\n    const downloadWithAxios = (url, title)=>{\n        axios({\n            method: 'get',\n            url,\n            responseType: 'arraybuffer'\n        }).then((response)=>{\n            forceDownload(response, title)\n        }).catch((error)=> console.log(error))\n\n    }\n\n\n    useEffect (() =>{\n        getFiles()\n        console.log(files)\n    }, [])\n\n\n\nreturn (\n    <div className=\"container-fluid\">\n\n    <h2 className=\"text-center alert alert-danger mt-2\">PDF to WORD Conversion Upload And Download</h2>\n\n\n    <div className=\"row\">\n        <div className=\"col-md-4\">\n            <h2 className=\"alert alert-success\">WORD Upload Section</h2>\n\n<form >\n<div className=\"form-group\">\n<label htmlFor=\"exampleFormControlFile1\" className=\"float-left\">Browse A WORD File To Upload</label>\n<input type=\"file\" onChange={e => setFilename(e.target.files[0])} className=\"form-control\" />\n</div>\n\n<button type=\"button\" onClick={saveFile} className=\"btn btn-primary float-left mt-2\">Submit</button>\n<br/>\n<br/>\n<br/>\n\n{status ? <h2>{status}</h2>:null}\n\n\n</form>\n\n\n        </div>\n\n\n        <div className=\"col-md-7\">\n\n\n<h2 className=\"alert alert-success\">List of Uploaded PDF Files</h2>\n\n<table className=\"table table-bordered mt-4\">\n<thead>\n<tr>\n<th scope=\"col\">File Title</th>\n<th scope=\"col\">Download</th>\n</tr>\n</thead>\n<tbody>\n\n{files.map(file => {\n    return(\n        <tr>\n    <td>{file.pdf}</td>\n    <td><a href=\"\" target=\"_blank\"></a>\n    \n    <button onClick={()=> downloadWithAxios(file.pdf, file.id)} className=\"btn btn-success\">DownLoad</button>\n    </td>\n</tr>\n\n        \n    )\n})}\n\n\n\n\n\n\n</tbody>\n</table>\n\n        </div>\n    </div>\n</div>\n\n    )\n}\n\nexport default UploadFile\n","/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/store.js",["134"],"import { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n",["135","136"],"/mnt/c/courses/ppaw/old/pdf_to_word/frontend/src/containers/ResetPasswordConfirm.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/actions/auth.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/store.js",["137"],["138","139"],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/reducers/auth.js",["140"],"import {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    GOOGLE_AUTH_SUCCESS,\n    GOOGLE_AUTH_FAIL,\n    LOGOUT\n} from '../actions/types';\n\nconst initialState = {\n    access: localStorage.getItem('access'),\n    refresh: localStorage.getItem('refresh'),\n    isAuthenticated: null,\n    user: null\n};\n\nexport default function(state = initialState, action) {\n    const { type, payload } = action;\n\n    switch(type) {\n        case AUTHENTICATED_SUCCESS:\n            return {\n                ...state,\n                isAuthenticated: true\n            };\n        case LOGIN_SUCCESS:\n        case GOOGLE_AUTH_SUCCESS:\n        case SIGNUP_SUCCESS:\n            // Assuming payload includes tokens directly for simplicity\n            localStorage.setItem('access', payload.access);\n            localStorage.setItem('refresh', payload.refresh);\n            return {\n                ...state,\n                access: payload.access,\n                refresh: payload.refresh,\n                isAuthenticated: true, // Setting isAuthenticated to true after successful login/signup/Google auth\n                user: payload.user ? payload.user : state.user // Optionally updating user if payload includes user data\n            };\n        case USER_LOADED_SUCCESS:\n            return {\n                ...state,\n                user: payload\n            };\n        case AUTHENTICATED_FAIL:\n        case USER_LOADED_FAIL:\n            return {\n                ...state,\n                isAuthenticated: false,\n                user: null\n            };\n        case GOOGLE_AUTH_FAIL:\n        case LOGIN_FAIL:\n        case SIGNUP_FAIL:\n        case LOGOUT:\n            localStorage.removeItem('access');\n            localStorage.removeItem('refresh');\n            return {\n                ...state,\n                access: null,\n                refresh: null,\n                isAuthenticated: false,\n                user: null\n            };\n        case PASSWORD_RESET_SUCCESS:\n        case PASSWORD_RESET_FAIL:\n        case PASSWORD_RESET_CONFIRM_SUCCESS:\n        case PASSWORD_RESET_CONFIRM_FAIL:\n        case ACTIVATION_SUCCESS:\n        case ACTIVATION_FAIL:\n            // For these cases, you're simply returning the current state. \n            // Consider if any state updates are necessary for these actions.\n            return {\n                ...state\n            };\n        default:\n            return state;\n    }\n};\n","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Google.js",["141"],"import React, { useState, useEffect } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { googleAuthenticate } from '../actions/auth';\nimport queryString from 'query-string';\n\nconst Google = ({ googleAuthenticate }) => {\n    let location = useLocation();\n    const [redirectTo, setRedirectTo] = useState('');\n\n    useEffect(() => {\n        const { state, code, role } = queryString.parse(location.search);\n\n        if (state && code) {\n            googleAuthenticate(state, code);\n            setRedirectTo(role === 'secretary' ? '/secretary' : '/student');\n        }\n    }, [location.search]);\n\n    if (redirectTo) {\n        return <Redirect to={redirectTo} />;\n    }\n\n    return null; \n};\n\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { googleAuthenticate })(Google);\n","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/ResetPasswordConfirm.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Signup.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/index.js",[],["142","143"],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Login.js",[],["144","145"],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/actions/types.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/hocs/Layout.js",["146"],"import React, { useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport { connect } from 'react-redux';\nimport { checkAuthenticated, load_user } from '../actions/auth';\n\nconst Layout = ({ checkAuthenticated, load_user, children }) => {\n    useEffect(() => {\n        checkAuthenticated();\n        load_user();\n    }, []);\n\n    return (\n        <div>\n            <Navbar />\n            {children}\n        </div>\n    );\n};\n\nexport default connect(null, { checkAuthenticated, load_user })(Layout);\n","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Home.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/components/Student.js",["147","148"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useApiUploadService } from '../hooks/useApiUploadService'; \nimport { connect } from 'react-redux';\nimport { checkAuthenticated, load_user } from '../actions/auth';\n\nfunction Student({ checkAuthenticated, load_user, user }) {\n    const [filename, setFilename] = useState('');\n    const [files, setFiles] = useState([]);\n    const [status, setStatus] = useState('');\n    const [subscription, setSubscription] = useState([]);\n    const [selectedPlan, setSelectedPlan] = useState(null);\n    const [selectedPlanType, setSelectedPlanType] = useState('');\n    const { uploadFile, getFiles, getSubscriptionsTypes, downloadWithAxios, deleteWithAxios } = useApiUploadService(); \n    const history = useHistory();\n\n    useEffect(() => {\n        checkAuthenticated();\n        load_user();\n        fetchSubscriptionDetails();\n        fetchFiles();\n        console.log('Local Storage', localStorage);\n    }, []);\n\n    const fetchFiles = async () => {\n        try {\n            const filesList = await getFiles();\n            setFiles(Array.isArray(filesList) ? filesList : []);\n        } catch (error) {\n            setStatus('Failed to load files');\n            setFiles([]);\n        }\n    };\n\n    const fetchSubscriptionDetails = async () => {\n        try {\n            const subscriptionList = await getSubscriptionsTypes();\n            setSubscription(Array.isArray(subscriptionList) ? subscriptionList : []); \n        } catch (error) {\n            setSubscription([]); \n        }\n    };\n\n    const handleFileUpload = async () => {\n        if (!filename || !(filename instanceof File)) {\n            setStatus('No file selected or invalid file');\n            return;\n        }\n    \n        const reader = new FileReader();\n        reader.onloadend = async () => {\n            try {\n                await uploadFile(new Blob([reader.result], { type: 'application/pdf' }), filename.name);\n                setStatus('File uploaded successfully');\n                fetchFiles();\n            } catch (error) {\n                setStatus(`Error in file upload: ${error.message}`);\n            }\n        };\n        reader.onerror = () => setStatus('Error reading the file');\n        reader.readAsArrayBuffer(filename);\n    };\n    \n    const handleFileChange = (event) => setFilename(event.target.files[0]);\n    \n    const handleFileDownload = async (fileId, title) => {\n        try {\n            await downloadWithAxios(fileId, title);\n            fetchFiles();\n        } catch (error) {\n            setStatus('Error downloading file');\n        }\n    }; \n    \n    const handleFileDelete = async (fileId, title) => {\n        try {\n            await deleteWithAxios(fileId, title);\n            const updatedFiles = files.filter(file => file.id !== fileId);\n            setFiles(updatedFiles)\n        } catch (error) {\n            setStatus('Error deleting file');\n        }\n    };\n\n    const selectPlanHandler = (id, type) => {\n        setSelectedPlan(id);\n        setSelectedPlanType(type);\n        history.push('/subscription', { selectedPlanId: id, selectedPlanType: type });\n    };\n\n    return (\n        <div className=\"container-fluid\">\n            <h2 className=\"text-center alert alert-danger mt-2\">Student Page</h2>\n            {user && (\n                <div className=\"alert alert-info\">\n                    Logged in as: {user.email} \n                </div>\n            )}\n            <div className=\"row\">\n                <div className=\"col-md-5\">\n                    <h2 className=\"alert alert-success\">WORD Upload Section</h2>\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"exampleFormControlFile1\" className=\"float-left\">Browse A WORD File To Upload</label>\n                            <input type=\"file\" multiple onChange={handleFileChange} className=\"form-control\" />\n                        </div>\n                        <button type=\"button\" onClick={handleFileUpload} className=\"btn btn-primary float-left mt-2\">CONVERT</button>\n                        <br/><br/><br/>\n                        {status ? <h2>{status}</h2> : null}\n                    </form>\n                </div>\n                <div className=\"col-md-7\">\n                    <h2 className=\"alert alert-success\">List of Uploaded PDF Files</h2>\n                    <table className=\"table table-bordered mt-4\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">File Title</th>\n                                <th scope=\"col\">Download</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {files.map(file => (\n                                <tr key={file.id}>\n                                    <td>{file.word_file_name}</td>\n                                    <td>\n                                        <button onClick={() => handleFileDownload(file.id, file.word_file_name)} className=\"btn btn-success\" style={{ marginRight: '20px' }}>Download</button>\n                                        <button onClick={() => handleFileDelete(file.id, file.word_file_name)} class=\"btn btn-danger\">Delete</button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div className=\"subscription-plans mt-4\">\n            <h2 className=\"text-center alert alert-info\">Subscription Plans</h2>\n            <div className=\"row\">\n                {Array.isArray(subscription) && subscription.map(subscription_type => (\n                    <div key={subscription_type.id} className=\"col-md-4 mb-4\">\n                        <div \n                            className={`card text-center ${selectedPlan === subscription_type.id ? 'border-primary' : ''}`}\n                            onClick={() => selectPlanHandler(subscription_type.id, subscription_type.subscription_type)}\n                            style={{ cursor: 'pointer' }}\n                        >\n                            <div className=\"card-header\">{subscription_type.subscription_type}</div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{subscription_type.price}</h5>\n                                <p className=\"card-text\">{subscription_type.features}</p>\n                                <p className=\"card-text\">{subscription_type.available}</p>\n                                <p className=\"card-text\">{subscription_type.cancel}</p>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    console.log(state);\n    return {\n        user: state.auth.user \n    };\n}\n\nexport default connect(mapStateToProps, { checkAuthenticated, load_user })(Student);\n\n","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/reducers/index.js",[],["149","150"],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/components/Secretary.js",["151","152"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useApiUploadService } from '../hooks/useApiUploadService'; \nimport { connect } from 'react-redux';\nimport { checkAuthenticated, load_user } from '../actions/auth';\n\nfunction Secretary({ checkAuthenticated, load_user, user }) {\n    const [filename, setFilename] = useState('');\n    const [files, setFiles] = useState([]);\n    const [status, setStatus] = useState('');\n    const [subscription, setSubscription] = useState([]);\n    const [selectedPlan, setSelectedPlan] = useState(null);\n    const [selectedPlanType, setSelectedPlanType] = useState('');\n    const { uploadFile, getFiles, getSubscriptionsTypes, downloadWithAxios, deleteWithAxios } = useApiUploadService(); \n    const history = useHistory();\n\n    useEffect(() => {\n        checkAuthenticated();\n        load_user();\n        fetchSubscriptionDetails();\n        fetchFiles();\n        console.log('Local Storage', localStorage);\n    }, []);\n\n    const fetchFiles = async () => {\n        try {\n            const filesList = await getFiles();\n            setFiles(Array.isArray(filesList) ? filesList : []);\n        } catch (error) {\n            setStatus('Failed to load files');\n            setFiles([]);\n        }\n    };\n\n    const fetchSubscriptionDetails = async () => {\n        try {\n            const subscriptionList = await getSubscriptionsTypes();\n            setSubscription(Array.isArray(subscriptionList) ? subscriptionList : []); \n        } catch (error) {\n            setSubscription([]); \n        }\n    };\n\n    const handleFileUpload = async () => {\n        if (!filename || !(filename instanceof File)) {\n            setStatus('No file selected or invalid file');\n            return;\n        }\n    \n        const reader = new FileReader();\n        reader.onloadend = async () => {\n            try {\n                await uploadFile(new Blob([reader.result], { type: 'application/pdf' }), filename.name);\n                setStatus('File uploaded successfully');\n                fetchFiles();\n            } catch (error) {\n                setStatus(`Error in file upload: ${error.message}`);\n            }\n        };\n        reader.onerror = () => setStatus('Error reading the file');\n        reader.readAsArrayBuffer(filename);\n    };\n    \n    const handleFileChange = (event) => setFilename(event.target.files[0]);\n    \n    const handleFileDownload = async (fileId, title) => {\n        try {\n            await downloadWithAxios(fileId, title);\n            fetchFiles();\n        } catch (error) {\n            setStatus('Error downloading file');\n        }\n    }; \n    \n    const handleFileDelete = async (fileId, title) => {\n        try {\n            await deleteWithAxios(fileId, title);\n            const updatedFiles = files.filter(file => file.id !== fileId);\n            setFiles(updatedFiles)\n        } catch (error) {\n            setStatus('Error deleting file');\n        }\n    };\n\n    const selectPlanHandler = (id, type) => {\n        setSelectedPlan(id);\n        setSelectedPlanType(type);\n        history.push('/subscription', { selectedPlanId: id, selectedPlanType: type });\n    };\n\n    return (\n        <div className=\"container-fluid\">\n            <h2 className=\"text-center alert alert-danger mt-2\">Secretary Page</h2>\n            {user && (\n                <div className=\"alert alert-info\">\n                    Logged in as: {user.email} \n                </div>\n            )}\n            <div className=\"row\">\n                <div className=\"col-md-5\">\n                    <h2 className=\"alert alert-success\">WORD Upload Section</h2>\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"exampleFormControlFile1\" className=\"float-left\">Browse A WORD File To Upload</label>\n                            <input type=\"file\" multiple onChange={handleFileChange} className=\"form-control\" />\n                        </div>\n                        <button type=\"button\" onClick={handleFileUpload} className=\"btn btn-primary float-left mt-2\">CONVERT</button>\n                        <br/><br/><br/>\n                        {status ? <h2>{status}</h2> : null}\n                    </form>\n                </div>\n                <div className=\"col-md-7\">\n                    <h2 className=\"alert alert-success\">List of Uploaded PDF Files</h2>\n                    <table className=\"table table-bordered mt-4\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">File Title</th>\n                                <th scope=\"col\">Download</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {files.map(file => (\n                                <tr key={file.id}>\n                                    <td>{file.word_file_name}</td>\n                                    <td>\n                                        <button onClick={() => handleFileDownload(file.id, file.word_file_name)} className=\"btn btn-success\" style={{ marginRight: '20px' }}>Download</button>\n                                        <button onClick={() => handleFileDelete(file.id, file.word_file_name)} class=\"btn btn-danger\">Delete</button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div className=\"subscription-plans mt-4\">\n            <h2 className=\"text-center alert alert-info\">Subscription Plans</h2>\n            <div className=\"row\">\n                {Array.isArray(subscription) && subscription.map(subscription_type => (\n                    <div key={subscription_type.id} className=\"col-md-4 mb-4\">\n                        <div \n                            className={`card text-center ${selectedPlan === subscription_type.id ? 'border-primary' : ''}`}\n                            onClick={() => selectPlanHandler(subscription_type.id, subscription_type.subscription_type)}\n                            style={{ cursor: 'pointer' }}\n                        >\n                            <div className=\"card-header\">{subscription_type.subscription_type}</div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{subscription_type.price}</h5>\n                                <p className=\"card-text\">{subscription_type.features}</p>\n                                <p className=\"card-text\">{subscription_type.available}</p>\n                                <p className=\"card-text\">{subscription_type.cancel}</p>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    console.log(state); \n    return {\n        user: state.auth.user \n    };\n}\n\nexport default connect(mapStateToProps, { checkAuthenticated, load_user })(Secretary);\n\n","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/components/Navbar.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/components/Administrator.js",["153","154"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useApiUploadService } from '../hooks/useApiUploadService'; \nimport { connect } from 'react-redux';\nimport { checkAuthenticated, load_user } from '../actions/auth';\n\nfunction Administrator({ checkAuthenticated, load_user, user }) {\n    const [filename, setFilename] = useState('');\n    const [files, setFiles] = useState([]);\n    const [status, setStatus] = useState('');\n    const [subscription, setSubscription] = useState([]);\n    const [selectedPlan, setSelectedPlan] = useState(null);\n    const [selectedPlanType, setSelectedPlanType] = useState('');\n    const { uploadFile, getFiles, getSubscriptionsTypes, downloadWithAxios, deleteWithAxios } = useApiUploadService(); \n    const history = useHistory();\n\n    useEffect(() => {\n        checkAuthenticated();\n        load_user();\n        fetchSubscriptionDetails();\n        fetchFiles();\n        console.log('Local Storage', localStorage);\n    }, []);\n\n    const fetchFiles = async () => {\n        try {\n            const filesList = await getFiles();\n            setFiles(Array.isArray(filesList) ? filesList : []);\n        } catch (error) {\n            setStatus('Failed to load files');\n            setFiles([]);\n        }\n    };\n\n    const fetchSubscriptionDetails = async () => {\n        try {\n            const subscriptionList = await getSubscriptionsTypes();\n            setSubscription(Array.isArray(subscriptionList) ? subscriptionList : []); \n        } catch (error) {\n            setSubscription([]); \n        }\n    };\n\n    const handleFileUpload = async () => {\n        if (!filename || !(filename instanceof File)) {\n            setStatus('No file selected or invalid file');\n            return;\n        }\n    \n        const reader = new FileReader();\n        reader.onloadend = async () => {\n            try {\n                await uploadFile(new Blob([reader.result], { type: 'application/pdf' }), filename.name);\n                setStatus('File uploaded successfully');\n                fetchFiles();\n            } catch (error) {\n                setStatus(`Error in file upload: ${error.message}`);\n            }\n        };\n        reader.onerror = () => setStatus('Error reading the file');\n        reader.readAsArrayBuffer(filename);\n    };\n    \n    const handleFileChange = (event) => setFilename(event.target.files[0]);\n    \n    const handleFileDownload = async (fileId, title) => {\n        try {\n            await downloadWithAxios(fileId, title);\n            fetchFiles();\n        } catch (error) {\n            setStatus('Error downloading file');\n        }\n    }; \n    \n    const handleFileDelete = async (fileId, title) => {\n        try {\n            await deleteWithAxios(fileId, title);\n            const updatedFiles = files.filter(file => file.id !== fileId);\n            setFiles(updatedFiles)\n        } catch (error) {\n            setStatus('Error deleting file');\n        }\n    };\n\n    const selectPlanHandler = (id, type) => {\n        setSelectedPlan(id);\n        setSelectedPlanType(type);\n        history.push('/subscription', { selectedPlanId: id, selectedPlanType: type });\n    };\n\n    return (\n        <div className=\"container-fluid\">\n            <h2 className=\"text-center alert alert-danger mt-2\">Administrator Page</h2>\n            {user && (\n                <div className=\"alert alert-info\">\n                    Logged in as: {user.email} \n                </div>\n            )}\n            <div className=\"row\">\n                <div className=\"col-md-5\">\n                    <h2 className=\"alert alert-success\">WORD Upload Section</h2>\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"exampleFormControlFile1\" className=\"float-left\">Browse A WORD File To Upload</label>\n                            <input type=\"file\" multiple onChange={handleFileChange} className=\"form-control\" />\n                        </div>\n                        <button type=\"button\" onClick={handleFileUpload} className=\"btn btn-primary float-left mt-2\">CONVERT</button>\n                        <br/><br/><br/>\n                        {status ? <h2>{status}</h2> : null}\n                    </form>\n                </div>\n                <div className=\"col-md-7\">\n                    <h2 className=\"alert alert-success\">List of Uploaded PDF Files</h2>\n                    <table className=\"table table-bordered mt-4\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">File Title</th>\n                                <th scope=\"col\">Download</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {files.map(file => (\n                                <tr key={file.id}>\n                                    <td>{file.word_file_name}</td>\n                                    <td>\n                                        <button onClick={() => handleFileDownload(file.id, file.word_file_name)} className=\"btn btn-success\" style={{ marginRight: '20px' }}>Download</button>\n                                        <button onClick={() => handleFileDelete(file.id, file.word_file_name)} class=\"btn btn-danger\">Delete</button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div className=\"subscription-plans mt-4\">\n            <h2 className=\"text-center alert alert-info\">Subscription Plans</h2>\n            <div className=\"row\">\n                {Array.isArray(subscription) && subscription.map(subscription_type => (\n                    <div key={subscription_type.id} className=\"col-md-4 mb-4\">\n                        <div \n                            className={`card text-center ${selectedPlan === subscription_type.id ? 'border-primary' : ''}`}\n                            onClick={() => selectPlanHandler(subscription_type.id, subscription_type.subscription_type)}\n                            style={{ cursor: 'pointer' }}\n                        >\n                            <div className=\"card-header\">{subscription_type.subscription_type}</div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{subscription_type.price}</h5>\n                                <p className=\"card-text\">{subscription_type.features}</p>\n                                <p className=\"card-text\">{subscription_type.available}</p>\n                                <p className=\"card-text\">{subscription_type.cancel}</p>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    console.log(state); \n    return {\n        user: state.auth.user \n    };\n}\n\nexport default connect(mapStateToProps, { checkAuthenticated, load_user })(Administrator);\n\n","/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/hooks/useApiUploadService.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/App.js",[],["155","156"],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/ResetPassword.js",[],"/mnt/c/courses/twaaos/generare-adeverinte/frontend/src/containers/Activate.js",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":2,"column":10,"nodeType":"163","messageId":"164","endLine":2,"endColumn":14},{"ruleId":"165","severity":1,"message":"166","line":21,"column":8,"nodeType":"167","endLine":21,"endColumn":18,"suggestions":"168"},{"ruleId":"165","severity":1,"message":"169","line":78,"column":8,"nodeType":"167","endLine":78,"endColumn":10,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":130,"column":9,"nodeType":"173","endLine":130,"endColumn":36},{"ruleId":"174","severity":1,"message":"175","line":130,"column":9,"nodeType":"173","endLine":130,"endColumn":36},{"ruleId":"161","severity":1,"message":"176","line":1,"column":40,"nodeType":"163","messageId":"164","endLine":1,"endColumn":47},{"ruleId":"157","replacedBy":"177"},{"ruleId":"159","replacedBy":"178"},{"ruleId":"161","severity":1,"message":"176","line":1,"column":40,"nodeType":"163","messageId":"164","endLine":1,"endColumn":47},{"ruleId":"157","replacedBy":"179"},{"ruleId":"159","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":28,"column":1,"nodeType":"183","endLine":89,"endColumn":2},{"ruleId":"165","severity":1,"message":"166","line":18,"column":8,"nodeType":"167","endLine":18,"endColumn":25,"suggestions":"184"},{"ruleId":"157","replacedBy":"185"},{"ruleId":"159","replacedBy":"186"},{"ruleId":"157","replacedBy":"187"},{"ruleId":"159","replacedBy":"188"},{"ruleId":"165","severity":1,"message":"189","line":10,"column":8,"nodeType":"167","endLine":10,"endColumn":10,"suggestions":"190"},{"ruleId":"161","severity":1,"message":"191","line":13,"column":12,"nodeType":"163","messageId":"164","endLine":13,"endColumn":28},{"ruleId":"165","severity":1,"message":"192","line":23,"column":8,"nodeType":"167","endLine":23,"endColumn":10,"suggestions":"193"},{"ruleId":"157","replacedBy":"194"},{"ruleId":"159","replacedBy":"195"},{"ruleId":"161","severity":1,"message":"191","line":13,"column":12,"nodeType":"163","messageId":"164","endLine":13,"endColumn":28},{"ruleId":"165","severity":1,"message":"192","line":23,"column":8,"nodeType":"167","endLine":23,"endColumn":10,"suggestions":"196"},{"ruleId":"161","severity":1,"message":"191","line":13,"column":12,"nodeType":"163","messageId":"164","endLine":13,"endColumn":28},{"ruleId":"165","severity":1,"message":"192","line":23,"column":8,"nodeType":"167","endLine":23,"endColumn":10,"suggestions":"197"},{"ruleId":"157","replacedBy":"198"},{"ruleId":"159","replacedBy":"199"},"no-native-reassign",["200"],"no-negated-in-lhs",["201"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'googleAuthenticate'. Either include it or remove the dependency array. If 'googleAuthenticate' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["202"],"React Hook useEffect has missing dependencies: 'files' and 'getFiles'. Either include them or remove the dependency array.",["203"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'compose' is defined but never used.",["200"],["201"],["200"],["201"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["204"],["200"],["201"],["200"],["201"],"React Hook useEffect has missing dependencies: 'checkAuthenticated' and 'load_user'. Either include them or remove the dependency array. If 'checkAuthenticated' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["205"],"'selectedPlanType' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkAuthenticated', 'fetchFiles', 'fetchSubscriptionDetails', and 'load_user'. Either include them or remove the dependency array. If 'checkAuthenticated' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["206"],["200"],["201"],["207"],["208"],["200"],["201"],"no-global-assign","no-unsafe-negation",{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"217","fix":"219"},{"desc":"217","fix":"220"},"Update the dependencies array to be: [googleAuthenticate, location]",{"range":"221","text":"222"},"Update the dependencies array to be: [files, getFiles]",{"range":"223","text":"224"},"Update the dependencies array to be: [googleAuthenticate, location.search]",{"range":"225","text":"226"},"Update the dependencies array to be: [checkAuthenticated, load_user]",{"range":"227","text":"228"},"Update the dependencies array to be: [checkAuthenticated, fetchFiles, fetchSubscriptionDetails, load_user]",{"range":"229","text":"230"},{"range":"231","text":"230"},{"range":"232","text":"230"},[685,695],"[googleAuthenticate, location]",[1838,1840],"[files, getFiles]",[643,660],"[googleAuthenticate, location.search]",[336,338],"[checkAuthenticated, load_user]",[1002,1004],"[checkAuthenticated, fetchFiles, fetchSubscriptionDetails, load_user]",[1004,1006],[1008,1010]]